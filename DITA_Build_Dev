/**
    __description__     = 'This Job is designed to provide a user friendly Interface to easy access of Python Framework for PLM based Teamcenter Modules deployments.'
    __author__          = 'Raghulraj Palanisamy & Asawari Deshpande'
    __copyright__       = "Â© Copyright Siemens. All rights reserved"
    __version__         = 0.1

 */
@Library('DITACI')_
import com.lib.GlobalVars
import com.lib.Utilities

String AGENT_SERVER_TO_DEPLOY = null
String AGENT_JENKINS_TO_SERVER_LNX = 'demchdc47xx'
String AGENT_JENKINS_TO_SERVER_WIN = 'demchdc8xna'
String TEAMCENTER_MODULES = ""
String ZIP_WIN_LOCATION = ""
String PACKAGE_CREATE_MESSAGE = ""
String DITA_SCRIPTS_PATH = ""
String DITA_BUILD_SCRIPTS = ""
Boolean delta_build = false
String currentBuidWorkspace = null
def branchesConfig = null
def resourcesConfig = null
def parametersConfig = null
def utils = null
String INCOMING_WEBHOOK_URL = ""
def GIT_PROJECT = ''
def GIT_REPOURL = ''
def SOURCE_BASE_LOCATION_WIN      = ''
def TARGET_BASE_LOCATION_WIN      = ''
def SOURCE_BASE_LOCATION_LNX      = ''
def TARGET_BASE_LOCATION_LNX      = ''
def SERVER_CODE_BASE_LOCATION_WIN = ''
def SERVER_CODE_BASE_LOCATION_LNX = ''
def SERVER_DLLS_LOCATION_WIN = ''
def SERVER_SO_LOCATION_LNX = ''
def TC_ROOT_LNX_DIR      = ''
def TC_ROOT_WIN_DIR      = ''
def SOFTWARE_VERSION = ''
def WEEKLY_PACKAGE_NAME = ''
def checkoutLocationWin = ''
def checkoutLocationLnx = ''
def BMIDE_PACKAGE_NAME_CMN = ""
def BMIDE_PACKAGE_NAME_RI = ""
def BMIDE_BIN_LOCATION_WIN = ""
def BMIDE_TEMPLATE_LOCATION_WIN = ''
def BMIDE_TEMPLATE_LOCATION_LNX = ''

def packagesList = ['Common', 'RI']


/* Pipeline JOB Setup required configurations */
pipeline {

    agent {
        label AGENT_JENKINS_TO_SERVER_LNX
    }
    options {
        skipDefaultCheckout()
        disableConcurrentBuilds()
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }

    stages {

        stage('Checkout Deployment Framework from SMO_CI-CD') {			
            steps {
                script {
                        cleanWs()
                        git branch: 'ci-cd-jenkins-delta',
                        credentialsId: 'indodbaat47xx',
                        url: 'git@code.siemens.com:a-pe/emea/siemens-mobility/plm_mo_ri/smo_ci-cd.git',
                        changelog: false,
                        poll: false
                        currentBuidWorkspace = WORKSPACE
                }
            }
            post {
                success {
                    echo "[DEBUG INFO] [ ========[ Checking-out of SMO_CI-CD project executed successfully ]======== ]"
                }
                failure{
                    echo "[DEBUG INFO] [ ========[ Checking-out of SMO_CI-CD project execution failed ]======== ]"
                    notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                }
            }
        }


        stage ('Setup Choice Parameters'){
            steps {
                script {
                    dir(currentBuidWorkspace)
                    {
                        // Enhance the Parameters
                        parametersConfig = parametersPipeline([
                            currentBuidWorkspace: currentBuidWorkspace,
                            parametersEnable: ["GIT_BRANCH", "PACKAGE_NAME", "TC_VERSION", "TEAMCENTER_MODULES", "BUILD_PACKAGE", "DEPLOY_TYPE", "DEBUG_EXECUTION_MODE","NOTIFY_TEAMS_CHANNEL", "TARGET_TEAMS_CHANNELS", "PACKAGE_CREATE_MESSAGE" ]
                        ])
                        env.GLOBAL_EMAIL_OPTIONS = parametersConfig['emailConfig']['email_options']

                        utils = new Utilities()
                        resourcesConfig = configurations()

                        if (utils.checkTargetName(params.TEAMCENTER_MODULES, 'All')) {
                            TEAMCENTER_MODULES = utils.getMapValuesFromKey(parametersConfig['tcmodulesConfig']['tcmodule_options'], 'modules').join(',')
                        } else if (utils.checkTargetName(params.TEAMCENTER_MODULES, 'Allwin')) { 
                            TEAMCENTER_MODULES = utils.filterTargetName(utils.getMapValuesFromKey(parametersConfig['tcmodulesConfig']['tcmodule_options'], 'modules'), 'win').join(',')
                        } else if (utils.checkTargetName(params.TEAMCENTER_MODULES, 'Alllnx')) { 
                            TEAMCENTER_MODULES = utils.filterTargetName(utils.getMapValuesFromKey(parametersConfig['tcmodulesConfig']['tcmodule_options'], 'modules'), 'lnx').join(',')
                        } else {
                            TEAMCENTER_MODULES = params.TEAMCENTER_MODULES
                        }

                        
                        GIT_PROJECT = resourcesConfig['SMO_GIT_PROJECT']
                        GIT_REPOURL = resourcesConfig['SMO_GIT_URL']

                        SOURCE_BASE_LOCATION_WIN = resourcesConfig['SOURCE_BASE_LOCATION_WIN']
                        TARGET_BASE_LOCATION_WIN = resourcesConfig['TARGET_BASE_LOCATION_WIN']
                        SOURCE_BASE_LOCATION_LNX = resourcesConfig['SOURCE_BASE_LOCATION_LNX']
                        TARGET_BASE_LOCATION_LNX = resourcesConfig['TARGET_BASE_LOCATION_LNX']

                        SERVER_CODE_BASE_LOCATION_WIN = resourcesConfig['SERVER_CODE_BASE_LOCATION_WIN']

                        SERVER_CODE_BASE_LOCATION_LNX = resourcesConfig['SERVER_CODE_BASE_LOCATION_LNX']
                        SERVER_DLLS_LOCATION_WIN = resourcesConfig['SERVER_DLLS_LOCATION_WIN']

                        SERVER_SO_LOCATION_LNX = resourcesConfig['SERVER_SO_LOCATION_LNX']
                        TC_ROOT_LNX_DIR = resourcesConfig['TC_ROOT_LNX_DIR']
                        TC_ROOT_WIN_DIR = resourcesConfig['TC_ROOT_WIN_DIR']
                        WEEKLY_PACKAGE_NAME = resourcesConfig['WEEKLY_PACKAGE_NAME']
                        BMIDE_PACKAGE_NAME_CMN = resourcesConfig['BMIDE_PACKAGE_NAME_CMN']
                        BMIDE_PACKAGE_NAME_RI = resourcesConfig['BMIDE_PACKAGE_NAME_RI']
                        BMIDE_BIN_LOCATION_WIN = resourcesConfig['BMIDE_BIN_LOCATION_WIN']
                        BMIDE_TEMPLATE_LOCATION_WIN = resourcesConfig['BMIDE_TEMPLATE_LOCATION_WIN']
                        ZIP_WIN_LOCATION = resourcesConfig['ZIP_WIN_LOCATION']
                        BMIDE_TEMPLATE_LOCATION_LNX = resourcesConfig['BMIDE_TEMPLATE_LOCATION_LNX']

                        PACKAGE_CREATE_MESSAGE = params.PACKAGE_CREATE_MESSAGE

                        PACKAGE_CREATE_MESSAGE = PACKAGE_CREATE_MESSAGE.replace('GIT_BRANCH', params.GIT_BRANCH)
                        PACKAGE_CREATE_MESSAGE = PACKAGE_CREATE_MESSAGE.replace('TC_VERSION', params.TC_VERSION)
                        

                        echo "[DEBUG INFO] WORKSPACE : ${env.WORKSPACE}"
                        echo "[DEBUG INFO] SMO_GIT_URL : ${GIT_REPOURL}"
                        echo "[DEBUG INFO] SMO_GIT_PROJECT : ${GIT_PROJECT}"                        
                        echo "[DEBUG INFO] GIT_BRANCH : ${params.GIT_BRANCH}"
                        echo "[DEBUG INFO] TC_VERSION : ${params.TC_VERSION}"                     
                        echo "[DEBUG INFO] PACKAGE_NAME : ${params.PACKAGE_NAME}" 
                        echo "[DEBUG INFO] ZIP_WIN_LOCATION : ${ZIP_WIN_LOCATION}"                        
                        echo "[DEBUG INFO] BUILD_PACKAGE : ${params.BUILD_PACKAGE}"
                        echo "[DEBUG INFO] DEPLOY_TYPE : ${params.DEPLOY_TYPE}"
                        echo "[DEBUG INFO] DEBUG_EXECUTION_MODE : ${params.DEBUG_EXECUTION_MODE}"
                        echo "[DEBUG INFO] NOTIFY_TEAMS_CHANNEL : ${params.NOTIFY_TEAMS_CHANNEL}"
                        echo "[DEBUG INFO] AGENT_SERVER_TO_DEPLOY: ${AGENT_SERVER_TO_DEPLOY}"
                        echo "[DEBUG INFO] TEAMCENTER_MODULES: ${TEAMCENTER_MODULES}"  

                        if (params.containsKey("SOFTWARE_VERSION")) { // SOFTWARE_VERSION Get from Parent Job (DITA_BuildDeployTest)
                            echo "[DEBUG INFO] SOFTWARE_VERSION from Parent Job: ${params.SOFTWARE_VERSION}"
                            SOFTWARE_VERSION = params.SOFTWARE_VERSION
                        } else {
                            SOFTWARE_VERSION = new Date().format("yyyyMMdd.HHmm", TimeZone.getTimeZone('UTC'))
                            echo "[DEBUG INFO] SOFTWARE_VERSION from Current Build Job: " + SOFTWARE_VERSION
                        }  

                        if (params.DEPLOY_TYPE == 'Full') {
                            delta_build = false
                        } else if(params.DEPLOY_TYPE == 'Delta')  {
                            delta_build = true
                        }

                        if (params.PACKAGE_NAME == null) {
                            error 'PACKAGE_NAME is Empty'
                        }                    
                    }
                }
            }
            post {
                success{
                    echo "[DEBUG INFO] [ ========[ Updating the parameters successfully ]======== ]"
                }
                failure{
                    echo "[DEBUG INFO] [ ========[ Updating the parameters failed ]======== ]"
                    notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                }
            }

        }

        stage('Validate Configuration') {
            failFast true
            agent {
                label AGENT_JENKINS_TO_SERVER_LNX
            }
            steps {
                script {
                    echo '[DEBUG INFO] DITA Prepare Build Package'
                    utils = new Utilities()
                    resourcesConfig = configurations()

                    branchesConfig = branches([
                            configuration: resourcesConfig,
                            parametersConfig: parametersConfig,
                            shareLocation: resourcesConfig['SMO_SHARE_PATH']
                        ])

                    DITA_BUILD_SCRIPTS = branchesConfig['DITA_BUILD_SCRIPTS']
                    DITA_SCRIPTS_PATH = branchesConfig['DITA_SCRIPTS_PATH']

                    echo "[DEBUG INFO] DITA_SCRIPTS_PATH: ${DITA_SCRIPTS_PATH}"
                    echo "[DEBUG INFO] DITA_BUILD_SCRIPTS: ${DITA_BUILD_SCRIPTS}"

                }
            }
        }

        stage ('Checkout Teamcenter Project Parallel Execution') {
            parallel {
                stage ('Checkout Teamcenter Project on Windows Node') {
                    agent {
                        label AGENT_JENKINS_TO_SERVER_WIN
                    }
                    when {
                        expression { utils.containsTargetName(TEAMCENTER_MODULES, 'win') }
                    }
                    steps {
                        script {
                            echo '[DEBUG INFO] Checking out Teamcenter Project from code.siemens.com on Windows Node....'
                            echo '[DEBUG INFO] Checkout Git Branch:' + parametersConfig['branchesConfig']['branch_options']."${params.GIT_BRANCH}"[0]
                            echo "[DEBUG INFO] Checkout Branch Name: ${params.GIT_BRANCH}"

                            SOURCE_BASE_LOCATION_WIN = SOURCE_BASE_LOCATION_WIN + '\\' + GIT_PROJECT + '\\'  + params.GIT_BRANCH
                            echo "[DEBUG INFO] SOURCE_BASE_LOCATION_WIN : ${SOURCE_BASE_LOCATION_WIN}"

                            checkoutLocationWin = SOURCE_BASE_LOCATION_WIN                            

                            dir(checkoutLocationWin) {
                                deleteDir()
                            }
                            dir(checkoutLocationWin) {
                                cleanWs()
                                checkout([$class: 'GitSCM', branches: [[name: '*/' + parametersConfig['branchesConfig']['branch_options']."${params.GIT_BRANCH}"[0]]], 
                                        extensions: [
                                            [$class: 'GitLFSPull']
                                            ],
                                        userRemoteConfigs: [
                                            [credentialsId: 'SMO_Credentials_Win', 
                                            url: GIT_REPOURL ]]
                                ])
                            }
                        }
                    }
                    post {
                        success {
                            echo "[DEBUG INFO] [ ========[ Checkout Teamcenter Project from code.siemens.com on Windows Node successfully ]======== ]"
                        }
                        failure {
                            echo "[DEBUG INFO] [ ========[ Checkout Teamcenter Project from code.siemens.com on Windows Node failed ]======== ]"
                            notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                        }
                    }
                
                }

                stage ('Checkout Teamcenter Project on Linux Node') {
                    agent {
                        label AGENT_JENKINS_TO_SERVER_LNX
                    }
                    when {
                        expression { utils.containsTargetName(TEAMCENTER_MODULES, 'lnx') }
                    }
                    steps {
                        script {
                            echo '[DEBUG INFO] Checkout Teamcenter Project from code.siemens.com on Linux Node....'
                            echo '[DEBUG INFO] Checkout Git Branch:' + parametersConfig['branchesConfig']['branch_options']."${params.GIT_BRANCH}"[0]
                            echo "[DEBUG INFO] Checkout Branch Name: ${params.GIT_BRANCH}"

                            SOURCE_BASE_LOCATION_LNX = SOURCE_BASE_LOCATION_LNX + '/' + GIT_PROJECT + '/'  + params.GIT_BRANCH 
                            echo "[DEBUG INFO] SOURCE_BASE_LOCATION_LNX : ${SOURCE_BASE_LOCATION_LNX}"

                            checkoutLocationLnx = SOURCE_BASE_LOCATION_LNX                     


                            dir (checkoutLocationLnx) {
                                cleanWs()
                                checkout([$class: 'GitSCM', branches: [[name: '*/' + parametersConfig['branchesConfig']['branch_options']."${params.GIT_BRANCH}"[0]]], 
                                        extensions: [
                                            // [$class: 'GitLFSPull']
                                            ],
                                        userRemoteConfigs: [
                                            [credentialsId: 'indodbaat47xx', 
                                            url: GIT_REPOURL ]]
                                        ])
                            }

                        }
                    }
                    post {
                        success{
                            echo "[DEBUG INFO] [ ========[ Checkout Teamcenter Project from code.siemens.com on Linux Node successfully ]======== ]"
                        }
                        failure{
                            echo "[DEBUG INFO] [ ========[ Checkout Teamcenter Project from code.siemens.com on Linux Node failed ]======== ]"
                            notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                        }
                    }

                }
            }
        }

        stage ('Updating Env Specific Config on Parallel Execution Machine Based on Selection') {
            parallel{
                stage ('Updating Env Specific Config on Windows Node') {
                    agent {
                        label AGENT_JENKINS_TO_SERVER_WIN
                        }
                    steps {
                        script {
                            echo '[DEBUG INFO] Updating TC Build Config on Windows Node....'

                            echo "TEAMCENTER_MODULES : ${params.TEAMCENTER_MODULES}"        

                        }
                    }
                }
                stage ('Updating Env Specific Config on Linux Node') {
                    agent {
                        label AGENT_JENKINS_TO_SERVER_LNX
                        }
                    steps {
                        script {
                            echo '[DEBUG INFO] Updating TC Build Config on Linux Node....'
                            echo "TEAMCENTER_MODULES : ${params.TEAMCENTER_MODULES}"

                            echo '[DEBUG INFO] Update BMIDE TC Version in Linux Environment'
                            String CheckProperties_CMD = "${DITA_BUILD_SCRIPTS} -m BuildPackage.checkproperties --workspace ${checkoutLocationLnx} -d"
                            runCommand([command: CheckProperties_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig, stagename:"Check_Properties"])

                            echo '[DEBUG INFO] Update BMIDE TC Version in Linux Environment'
                            String UpdateTCVersionLnx_CMD = "${DITA_BUILD_SCRIPTS} -m TCRelease.updatetcversion.lnx --workspace ${checkoutLocationLnx} --tc_version ${params.TC_VERSION} -d"
                            runCommand([command: UpdateTCVersionLnx_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig,stagename:"Update_TCVersion"])                   

                            echo '[DEBUG INFO] Update BMIDE TC Version in Windows Environment'
                            String UpdateTCVersionWin_CMD = "${DITA_BUILD_SCRIPTS} -m TCRelease.updatetcversion.win --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --tc_version ${params.TC_VERSION} -d"
                            runCommand([command: UpdateTCVersionWin_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig,stagename:"Update_TCVersion"])

                            echo '[DEBUG INFO] Update Preferences Version in Linux Environment'
                            String UpdatePreferencesVersionLnx_CMD = "${DITA_BUILD_SCRIPTS} -m TCRelease.updatepreferencesversion.lnx --workspace ${checkoutLocationLnx} --software_version ${SOFTWARE_VERSION} --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} -d"
                            runCommand([command: UpdatePreferencesVersionLnx_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig,stagename:"Update_Preferences_Version_Lnx"])

                            echo '[DEBUG INFO] Update Preferences Version in Windows Environment' 
                            String UpdatePreferencesVersionWin_CMD = "${DITA_BUILD_SCRIPTS} -m TCRelease.updatepreferencesversion.win --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --software_version ${SOFTWARE_VERSION} --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} -d"
                            runCommand([command: UpdatePreferencesVersionWin_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig,stagename:"Update_Preferences_Version_Win"])                    
                        }
                    }
                }
            }
        }


        stage ('TC Components Parallel Build') {
            parallel
            {
                stage ('Build BMIDE Package') 
                {
					agent {
                            label AGENT_JENKINS_TO_SERVER_LNX // AGENT_JENKINS_TO_SERVER_WIN
                        }
                    when {
                        expression { utils.checkTargetName(TEAMCENTER_MODULES, 'winBMIDE') }
                    }
                    steps 
                    {
                        script {        

                            def description = SOFTWARE_VERSION + '_' + 'CMN' + '_' +  params.GIT_BRANCH + '_' + params.PACKAGE_NAME + ',' + SOFTWARE_VERSION + '_' + 'RI' + '_' +  params.GIT_BRANCH + '_' + params.PACKAGE_NAME

                            currentBuild.description = description                   

                            echo '[DEBUG INFO] Build BMIDE Windows Environment' 
                            
                            String BMIDEBuildWin_CMD = "${DITA_BUILD_SCRIPTS} -m BMIDE.build.win --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                            runCommand([command: BMIDEBuildWin_CMD])
                            checkErrorStatus([parametersConfig: parametersConfig,stagename:"BMIDE_Build_Win"])

                       }
                    }
                    post {
                        success {
                            echo "[DEBUG INFO] [ ========[ BMIDE Build successfully ]======== ]"
                        }
                        failure {
                            echo "[DEBUG INFO] [  ========[ BMIDE Build failed ]======== ]"
                            notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                        }
                    }
                }

                stage ('Build lnx') 
                {
					agent {
						label AGENT_JENKINS_TO_SERVER_LNX
					}
                    when {
                        expression { (utils.checkTargetName(TEAMCENTER_MODULES, 'lnxLibs') || utils.checkTargetName(TEAMCENTER_MODULES, 'lnxBmideSos')) }
                    }
					steps {
                        script {
                            if (utils.checkTargetName(TEAMCENTER_MODULES, 'lnxLibs')) {
                                echo '[DEBUG INFO] Build lnxLibs on Linux Node.... Started'
                               
                                echo '[DEBUG INFO] Build ITK Linux Library (lnxLibs)'
                                String ITK_Build_LnxLib_CMD = "${DITA_BUILD_SCRIPTS} -m ITK.build.lnx --workspace ${checkoutLocationLnx} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                                runCommand([command: ITK_Build_LnxLib_CMD])
                                checkErrorStatus([parametersConfig: parametersConfig,stagename:"ITK_Build_LnxLib_CMD"])

                            }

                            if (utils.checkTargetName(TEAMCENTER_MODULES, 'lnxBmideSos')) {
                                echo '[DEBUG INFO] Build lnxBmideSos on Linux Node.... Started'

                                echo '[DEBUG INFO] Build BMIDE Linux SO (lnxBMIDESO)'
                                String BMIDE_Build_LnxSO_CMD = "${DITA_BUILD_SCRIPTS} -m BMIDE.so --workspace ${checkoutLocationLnx} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                                runCommand([command: BMIDE_Build_LnxSO_CMD])
                                checkErrorStatus([parametersConfig: parametersConfig,stagename:"BMIDE_Build_LnxSO_CMD"])                                

                            }
                            echo '[DEBUG INFO] End Bmide Linux Bmide SO Files'
                            echo '[DEBUG INFO] End Build SO Files'
                        }
                    }
                    post {
                        success {
                            echo "[DEBUG INFO] [ ========[ BMIDE Generate Package Utility successfully ]======== ]"
                        }
                        failure {
                            echo "[DEBUG INFO] [  ========[ BMIDE Generate Package Utility failed ]======== ]"
                            notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                        }

                    }
                }

                stage ('build win') 
                {
					agent {
						label AGENT_JENKINS_TO_SERVER_LNX // AGENT_JENKINS_TO_SERVER_WIN
						}
                    when {
                        expression { 
                            (utils.checkTargetName(TEAMCENTER_MODULES, 'winLibs') || utils.checkTargetName(TEAMCENTER_MODULES, 'winBmideDlls')) 
                        }
                    }
                    steps {
                        script {
                            if (utils.checkTargetName(TEAMCENTER_MODULES, 'winLibs')) {
                                echo '[DEBUG INFO] Build winLibs on Windows Node.... Started'

                                
                                echo '[DEBUG INFO] Build ITK Windows Library (WinLibs)'
                                String ITK_Build_WinLib_CMD = "${DITA_BUILD_SCRIPTS} -m ITK.build.win --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                                runCommand([command: ITK_Build_WinLib_CMD])
                                checkErrorStatus([parametersConfig: parametersConfig,stagename:"ITK_Build_WinLib"])

                            }
                            if (utils.checkTargetName(TEAMCENTER_MODULES, 'winBmideDlls')) {
                                echo '[DEBUG INFO] Build winBmideDlls on Linux Node.... Started'

                                echo '[DEBUG INFO] Build BMIDE Windows DLLs (WinBMIDEDlls)'
                                String BMIDE_Build_WinDlls_CMD = "${DITA_BUILD_SCRIPTS} -m BMIDE.dlls --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                                runCommand([command: BMIDE_Build_WinDlls_CMD])
                                checkErrorStatus([parametersConfig: parametersConfig,stagename:"BMIDE_Build_WinDlls"])                               

                            }
                        }
                    }
                    post {
                        success {
                            echo "[DEBUG INFO] [ ========[ WinBMIDEDLL & WinLibs Build successfully ]======== ]"
                            // notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - SUCCESS- #${env.BUILD_NUMBER}", body:PACKAGE_CREATE_MESSAGE, options: 'package_create',  profile: 'SystemAdmin'])
                        }
                        failure {
                            echo "[DEBUG INFO] [  ========[ WinBMIDEDLL & WinLibs Build failed ]======== ]"
                            notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                        }

                    }
                }
            
            }
        }


        stage ('Copy Package Windows') {
            agent {
                label AGENT_JENKINS_TO_SERVER_LNX
                }
            when {
                expression { env.BUILD_PACKAGE.equals("true") }
                }
            steps {
                script {
                    echo '[DEBUG INFO] BUILD_PACKAGE:' + env.BUILD_PACKAGE
                    echo '[DEBUG INFO] Copy TC Configuration into Stash Build Package Win....'
                    utils = new Utilities()
                    echo '[DEBUG INFO] Full Package Creation Win'
                    String BuildPackageCreateWin_CMD = "${DITA_BUILD_SCRIPTS} -m BuildPackage.create.win --workspace ${utils.replaceEscapedPath(checkoutLocationWin)} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                    runCommand([command: BuildPackageCreateWin_CMD])
                    checkErrorStatus([parametersConfig: parametersConfig,stagename:"BuildPackageCreate_Win"])                    
                }
            }
            post {
                success {
                    echo "[DEBUG INFO] [ ========[ TC Configuration and Stash Build moved to Share Location successfully ]======== ]"
                }
                failure {
                    echo "[DEBUG INFO] [  ========[ TC Configuration and Stash Build moved to Share Location failed ]======== ]"
                    notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                }
            }
        }

        stage ('Copy Package Lnx') {
            agent {
                label AGENT_JENKINS_TO_SERVER_LNX
                }
            when {
                expression { env.BUILD_PACKAGE.equals("true") }
                }
            steps {
                script {
                    echo '[DEBUG INFO] Copy TC Configuration into Stash Build Package Lnx....'                 

                    echo '[DEBUG INFO] Full Package Creation Lnx'
                    String BuildPackageCreateLnx_CMD = "${DITA_BUILD_SCRIPTS} -m BuildPackage.create.lnx --workspace ${checkoutLocationLnx} --software_version '${SOFTWARE_VERSION}' --branch ${params.GIT_BRANCH} --package_name ${params.PACKAGE_NAME} --tc_version ${params.TC_VERSION} --artifacts_creation ${BUILD_PACKAGE} --delta_build ${delta_build} -d"
                    runCommand([command: BuildPackageCreateLnx_CMD])
                    checkErrorStatus([parametersConfig: parametersConfig,stagename:"BuildPackageCreate_Lnx"])

                }
            }
            post {
                success {
                    echo "[DEBUG INFO] [ ========[ TC Configuration and Stash Build moved to Share Location successfully ]======== ]"
                }
                failure {
                    echo "[DEBUG INFO] [  ========[ TC Configuration and Stash Build moved to Share Location failed ]======== ]"
                    notifications([parametersConfig: parametersConfig, 'subject': "${params.GIT_BRANCH} - ${params.TC_VERSION} - ${env.STAGE_NAME} FAILED- #${env.BUILD_NUMBER}", profile: 'SystemAdmin'])
                }
            }
        }


        stage ('Email Notification') {
                steps {
                    script {
                        echo '[DEBUG INFO] Send Email Notification to Leads and Developers'
                    }
                }
        }

    }


}   
